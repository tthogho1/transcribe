AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodeBuild project for Transcribe Service Docker image build and deployment'

Parameters:
  ProjectName:
    Type: String
    Default: transcribe-service-build
    Description: Name of the CodeBuild project

  GitHubRepo:
    Type: String
    Description: GitHub repository URL (e.g., https://github.com/username/repo.git)

  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch to build from

  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name

  ECRRepositoryName:
    Type: String
    Default: transcribe-service
    Description: ECR repository name

  ECSClusterName:
    Type: String
    Default: transcribe-cluster
    Description: ECS cluster name for deployment

  ECSServiceName:
    Type: String
    Default: transcribe-service
    Description: ECS service name for deployment

Resources:
  # S3 Bucket for CodeBuild artifacts
  CodeBuildArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-artifacts-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 30

  # CloudWatch Log Group for CodeBuild
  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/codebuild/${ProjectName}'
      RetentionInDays: 14

  # IAM Role for CodeBuild
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-codebuild-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildServicePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # CloudWatch Logs permissions
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}:*'

              # S3 permissions for artifacts
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub 'arn:aws:s3:::${CodeBuildArtifactsBucket}/*'

              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${CodeBuildArtifactsBucket}'

              # ECR permissions
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:CreateRepository
                  - ecr:DescribeRepositories
                  - ecr:PutLifecyclePolicy
                  - ecr:BatchDeleteImage
                  - ecr:ListImages
                Resource: '*'

              # ECS permissions for deployment
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                Resource: '*'

              # IAM permissions for ECS task roles
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*ecsTaskExecutionRole*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*ecsTaskRole*'

              # Systems Manager Parameter Store
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/codebuild/*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/transcribe/*'

  # Store CodeBuild parameters
  CodeBuildParameterAccountId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /codebuild/aws-account-id
      Type: String
      Value: !Ref AWS::AccountId

  CodeBuildParameterECRRepo:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /codebuild/ecr-repository-uri
      Type: String
      Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}'

  CodeBuildParameterECSCluster:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /codebuild/ecs-cluster-name
      Type: String
      Value: !Ref ECSClusterName

  CodeBuildParameterECSService:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /codebuild/ecs-service-name
      Type: String
      Value: !Ref ECSServiceName

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref ProjectName
      Description: !Sub 'Build Docker image for ${ProjectName}'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: S3
        Location: !Sub '${CodeBuildArtifactsBucket}'
        Name: !Sub '${ProjectName}-artifacts'
        Packaging: ZIP
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: !Ref ECRRepositoryName
          - Name: ENVIRONMENT
            Value: !Ref Environment
          - Name: ECS_CLUSTER_NAME
            Value: !Ref ECSClusterName
          - Name: ECS_SERVICE_NAME
            Value: !Ref ECSServiceName
      Source:
        Type: GITHUB
        Location: !Ref GitHubRepo
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 20
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - IMAGE_TAG=${COMMIT_HASH:=latest}
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:latest
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker images...
                - docker push $REPOSITORY_URI:$IMAGE_TAG
                - docker push $REPOSITORY_URI:latest
                - printf '[{"name":"transcribe-container","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
          artifacts:
            files:
              - imagedefinitions.json
              - ecs-task-definition.json
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref CodeBuildLogGroup
      TimeoutInMinutes: 30
      QueuedTimeoutInMinutes: 480

  # CodeBuild Webhook for automatic builds
  CodeBuildWebhook:
    Type: AWS::CodeBuild::Project
    Properties:
      ProjectName: !Ref CodeBuildProject
      SourceVersion: !Ref GitHubBranch

Outputs:
  CodeBuildProjectName:
    Description: Name of the CodeBuild project
    Value: !Ref CodeBuildProject
    Export:
      Name: !Sub '${AWS::StackName}-CodeBuildProject'

  CodeBuildProjectArn:
    Description: ARN of the CodeBuild project
    Value: !GetAtt CodeBuildProject.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CodeBuildProjectArn'

  ArtifactsBucketName:
    Description: Name of the S3 bucket for artifacts
    Value: !Ref CodeBuildArtifactsBucket
    Export:
      Name: !Sub '${AWS::StackName}-ArtifactsBucket'

  CodeBuildRoleArn:
    Description: ARN of the CodeBuild service role
    Value: !GetAtt CodeBuildServiceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CodeBuildRole'
